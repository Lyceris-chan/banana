name: Build Custom Alpine ISO

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-iso:
    runs-on: ubuntu-latest
    container:
      image: alpine:edge
      options: --user root  # Run as root to avoid permission issues
    steps:
      - name: Install Prerequisites
        run: |
          # Install the required tools
          apk update
          apk add alpine-sdk alpine-conf syslinux xorriso squashfs-tools grub grub-efi doas mtools dosfstools grub-efi

      - name: Create build user and add to abuild group
        run: |
          adduser -D build -G abuild

      - name: Configure doas for build user
        run: |
          echo "permit :abuild" > /etc/doas.d/doas.conf
          echo "permit persist :abuild" >> /etc/doas.d/doas.conf

      - name: Switch to build user
        run: |
          su - build

      - name: Generate signing keys for abuild
        run: |
          abuild-keygen -i -a

      - name: Verify keys are in /etc/apk/keys/
        run: |
          ls /etc/apk/keys/

      - name: Clone the Alpine aports repository
        run: |
          git clone --depth=1 https://gitlab.alpinelinux.org/alpine/aports.git

      - name: Update apk index
        run: |
          doas apk update

      - name: Create local tmp directory if needed
        run: |
          mkdir -pv ~/tmp
          export TMPDIR=~/tmp

      - name: Create mkimg custom profile script
        run: |
          export PROFILENAME=nas
          cat << EOF > ~/aports/scripts/mkimg.$PROFILENAME.sh
          profile_$PROFILENAME() {
              profile_standard
              kernel_cmdline="unionfs_size=512M console=tty0 console=ttyS0,115200"
              syslinux_serial="0 115200"
              kernel_addons="zfs"
              apks="\$apks iscsi-scst zfs-scripts zfs zfs-utils-py
                      cciss_vol_status lvm2 mdadm mkinitfs mtools nfs-utils
                      parted rsync sfdisk syslinux util-linux xfsprogs
                      dosfstools ntfs-3g
                      "
              local _k _a
              for _k in \$kernel_flavors; do
                  apks="\$apks linux-\$_k"
                  for _a in \$kernel_addons; do
                      apks="\$apks \$_a-\$_k"
                  done
              done
              apks="\$apks linux-firmware"
          }
          EOF
          chmod +x ~/aports/scripts/mkimg.$PROFILENAME.sh

      - name: Make packages available on boot (genapkovl-mkimgoverlay.sh)
        run: |
          cp ~/aports/scripts/genapkovl-dhcp.sh ~/aports/scripts/genapkovl-mkimgoverlay.sh
          sed -i '/makefile root:root 0644/a alpine-base\n<apk1-service>\n<apk2-service>' ~/aports/scripts/genapkovl-mkimgoverlay.sh
          sed -i '/rc_add/a rc_add <apk1-service> boot\nrc_add <apk2-service> boot' ~/aports/scripts/genapkovl-mkimgoverlay.sh

      - name: Link the overlay to the profile build script
        run: |
          echo "apkovl=\"aports/scripts/genapkovl-mkimgoverlay.sh\"" >> ~/aports/scripts/mkimg.$PROFILENAME.sh

      - name: Create ISO directory
        run: |
          mkdir -p ~/iso

      - name: Build the custom ISO
        run: |
          sh ~/aports/scripts/mkimage.sh --tag edge \
            --outdir ~/iso \
            --arch x86_64 \
            --repository https://dl-cdn.alpinelinux.org/alpine/edge/main \
            --profile nas

      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v3
        with:
          name: custom-alpine-iso
          path: ~/iso/*.iso
